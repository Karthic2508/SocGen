# -*- coding: utf-8 -*-
"""LLM Assistant .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19PIDOjqt-3cicWYQLAoADt3uJFPSjN_w
"""

pip install openai

from openai import OpenAI
import os
#from dotenv import load_dotenv
import openai
import requests
import json

import time
import logging
from datetime import datetime
#import streamlit as st

#concise bot

client = OpenAI(api_key="")

model = "gpt-3.5-turbo"

assistant = client.beta.assistants.create(
    name="trial",
    instructions="""You are an IT ops self help instructor. you must only provide step by step instructions to solve the specified IT issue""",
    model=model,
)

assis_id = "asst_NvNQiB5LDHM0IEaHAjRAJucn"

thread_id = "thread_U2jF7mnzoGjVxnEgHztxUETC"

message = "I am trying to open Excel spreadsheet but the application is constantly crashing."  #Incident description as prompt
message = client.beta.threads.messages.create(
    thread_id=thread_id, role="user", content=message
)

# == Run the Assistant  , 1 thread sufficient to ask further qs
run = client.beta.threads.runs.create(
    thread_id=thread_id,
    assistant_id=assis_id,
    instructions="Please address the user as employee",
)


def wait_for_run_completion(client, thread_id, run_id, sleep_interval=5):
    """
    Waits for a run to complete and prints the elapsed time.:param client: The OpenAI client object.
    :param thread_id: The ID of the thread.
    :param run_id: The ID of the run.
    :param sleep_interval: Time in seconds to wait between checks.
    """
    while True:
        try:
            run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run_id)
            if run.completed_at:
                elapsed_time = run.completed_at - run.created_at
                formatted_elapsed_time = time.strftime(
                    "%H:%M:%S", time.gmtime(elapsed_time)
                )
                print(f"Run completed in {formatted_elapsed_time}")
                logging.info(f"Run completed in {formatted_elapsed_time}")
                # Get messages here once Run is completed!
                messages = client.beta.threads.messages.list(thread_id=thread_id)
                last_message = messages.data[0]
                response = last_message.content[0].text.value
                print(f"Assistant Response: {response}")
                break
        except Exception as e:
            logging.error(f"An error occurred while retrieving the run: {e}")
            break
        logging.info("Waiting for run to complete...")
        time.sleep(sleep_interval)


wait_for_run_completion(client=client, thread_id=thread_id, run_id=run.id)